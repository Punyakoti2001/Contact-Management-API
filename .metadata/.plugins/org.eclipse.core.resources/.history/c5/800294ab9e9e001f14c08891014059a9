package com.buildbot.contactsmanagement.serviceimpl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.buildbot.contactsmanagement.entity.Contact;
import com.buildbot.contactsmanagement.exceptionhandling.ResourceAlreadyExistException;
import com.buildbot.contactsmanagement.exceptionhandling.ResourceNotFoundException;
import com.buildbot.contactsmanagement.mapper.ContactMapper;
import com.buildbot.contactsmanagement.repository.ContactRepository;
import com.buildbot.contactsmanagement.requestDto.ContactDto;
import com.buildbot.contactsmanagement.responseDto.ContactResponseDto;
import com.buildbot.contactsmanagement.service.ContactService;

import jakarta.transaction.Transactional;

@Service
public class ContactServiceImpl implements ContactService {
	@Autowired
	private ContactRepository contactRepository;

	@Override
	@Transactional
	public ContactResponseDto createNewResource(ContactDto contactDto) {

		Optional<Contact> existEmail = contactRepository.findByEmail(contactDto.getEmail());
		Optional<Contact> existPhoneNo = contactRepository.findByPhoneNo(contactDto.getPhoneNo());

		if (existEmail.isPresent()) {
			throw new ResourceAlreadyExistException("Email Already Exist");
		}

		if (existPhoneNo.isPresent()) {
			throw new ResourceAlreadyExistException("PhoneNo Already Exist");
		}

		Contact contact = ContactMapper.INSTANCE.mapToContact(contactDto);
		Contact save = contactRepository.save(contact);

		ContactResponseDto responseDto = ContactMapper.INSTANCE.mapToContactResponseDto(save);
		System.out.println(responseDto);

		return responseDto;
	}

	@Override
	public ContactResponseDto updateExistingResource(Long contactId, ContactDto contactDto) {

		Contact contact = contactRepository.findById(contactId)
				.orElseThrow(() -> new ResourceNotFoundException("Contact", "ContactId", contactId));

		Optional<Contact> existEmail = contactRepository.findByEmail(contactDto.getEmail());
		if (existEmail.isPresent() && !existEmail.get().getContactId().equals(contactId)) {
			throw new ResourceAlreadyExistException("Email already exists for another contact");
		}

		Optional<Contact> existPhoneNo = contactRepository.findByPhoneNo(contactDto.getPhoneNo());
		if (existPhoneNo.isPresent() && !existPhoneNo.get().getContactId().equals(contactId)) {
			throw new ResourceAlreadyExistException("Phone number already exists for another contact");
		}

		Contact updatedContact = ContactMapper.INSTANCE.updateMapToContact(contactDto, contact);

		Contact update = contactRepository.save(updatedContact);
		ContactResponseDto responseDto = ContactMapper.INSTANCE.mapToContactResponseDto(update);
		return responseDto;

	}

	@Override

	public List<ContactResponseDto> fetchAllContacts() {

		List<Contact> all = contactRepository.findAll();

		List<ContactResponseDto> responseDto = ContactMapper.INSTANCE.listMapToContactResponseDto(all);

		System.out.println(responseDto);

		return null;
	}

	@Override
	public ContactResponseDto fetchContactByPhoneNo(String phoneNo) {

		Contact contact = contactRepository.findByPhoneNo(phoneNo)
				.orElseThrow(() -> new ResourceNotFoundException("Contact", "PhoneNo", phoneNo));

		ContactResponseDto responseDto = ContactMapper.INSTANCE.mapToContactResponseDto(contact);

		return responseDto;
	}

	@Override
	public ContactResponseDto fetchContactByEmail(String email) {

		Contact contact = contactRepository.findByEmail(email)
				.orElseThrow(() -> new ResourceNotFoundException("Contact", "Email", email));

		ContactResponseDto responseDto = ContactMapper.INSTANCE.mapToContactResponseDto(contact);

		return responseDto;
	}

	@Override
	public void deleteContact(Long contactId) {
		
		Contact contact = contactRepository.findById(contactId)
				.orElseThrow(() -> new ResourceNotFoundException("Contact", "Email", contactId));
		
		contactRepository.deleteById(contactId);

	}

}
