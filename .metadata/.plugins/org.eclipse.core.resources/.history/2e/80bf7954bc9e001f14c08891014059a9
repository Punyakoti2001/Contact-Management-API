package com.buildbot.contactsmanagement.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import com.buildbot.contactsmanagement.helper.ResponseConstants;
import com.buildbot.contactsmanagement.requestDto.ContactDto;
import com.buildbot.contactsmanagement.responseDto.ContactResponseDto;
import com.buildbot.contactsmanagement.responseDto.ResponseDto;
import com.buildbot.contactsmanagement.service.ContactService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.constraints.Pattern;

@RestController
@RequestMapping("/build-bot/v1/contact")
@Tag(name = "Contact Management", description = "API for managing contact information")
public class ContactController {

    @Autowired
    private ContactService contactService;

    @Operation(summary = "Create a new contact", description = "Creates a new contact with the provided details")
    @PostMapping("/create-contact")
    public ResponseEntity<?> createNewContact(
            @RequestBody @Validated ContactDto contactDto) {

        ContactResponseDto newResource = contactService.createNewResource(contactDto);
        return ResponseEntity.status(HttpStatus.CREATED)
                .body(new ResponseDto(HttpStatus.CREATED, ResponseConstants.CREATED_SUCCESS));
    }

    @Operation(summary = "Update an existing contact", description = "Updates the details of an existing contact")
    @PutMapping("/update-contact/{contactId}")
    public ResponseEntity<?> updateContact(
            @Parameter(description = "ID of the contact to update", required = true)
            @Validated @Pattern(regexp = "\\d+") @PathVariable String contactId,
            @RequestBody @Validated ContactDto contactDto) {

        Long id = Long.parseLong(contactId);
        ContactResponseDto updateExistingResource = contactService.updateExistingResource(id, contactDto);
        return ResponseEntity.status(HttpStatus.OK)
                .body(new ResponseDto(HttpStatus.OK, ResponseConstants.UPDATED_SUCCESS));
    }

    @Operation(summary = "Fetch contacts by field", description = "Fetches contacts by phone number or email, or retrieves all contacts if no parameters are provided")
    @GetMapping(path = { "/fetchByField", "/fetch-all-contacts" })
    public ResponseEntity<?> fetchByRequiredField(
            @Parameter(description = "Phone number to filter by") @RequestParam(required = false) String phoneNo,
            @Parameter(description = "Email to filter by") @RequestParam(required = false) String email) {

        if (phoneNo == null && email == null) {
            List<ContactResponseDto> result = contactService.fetchAllContacts();
            return ResponseEntity.status(HttpStatus.OK).body(result);
        } else if (phoneNo != null && email == null) {
            ContactResponseDto result = contactService.fetchContactByPhoneNo(phoneNo);
            return ResponseEntity.status(HttpStatus.OK).body(result);
        } else if (phoneNo == null && email != null) {
            ContactResponseDto result = contactService.fetchContactByEmail(email);
            return ResponseEntity.status(HttpStatus.OK).body(result);
        } else {
            return ResponseEntity.badRequest().body("Please provide only one of either phoneNo or email, not both.");
        }
    }

    @Operation(summary = "Delete a contact", description = "Deletes a contact by its ID")
    @DeleteMapping("/delete-contact")
    public ResponseEntity<?> deleteContact(
            @Parameter(description = "ID of the contact to delete", required = true) 
            @RequestParam Long contactId) {

        contactService.deleteContact(contactId);
        return ResponseEntity.status(HttpStatus.OK).body(
                new ResponseDto(HttpStatus.OK, ResponseConstants.DELETE_SUCCESS + "with ContactId : " + contactId));
    }
}
