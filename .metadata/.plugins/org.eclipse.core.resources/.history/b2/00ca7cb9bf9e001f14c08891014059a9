package com.buildbot.contactsmanagement.security;

import java.util.Date;
import java.util.function.Function;

import javax.crypto.SecretKey;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

/**
 * This class provides functionalities for generating, validating and extracting information from JWT tokens.
 */
@Component
public class JwtService {

    /**
     * The secret key used for signing and verifying JWT tokens. This should be a strong, randomly generated secret string.
     * **IMPORTANT: NEVER expose this secret in your code or configuration!**
     */
    private final String SECRET = "mqKcywWjlQRXQI5d9R1ddHP2hZCX81BERR10w/T1aZk=";

    /**
     * Extracts the username from the JWT token.
     *
     * @param token the JWT token
     * @return the username from the token
     */
    public String extractUsername(String token) {
        return extractClaims(token, Claims::getSubject);
    }

    /**
     * Extracts a specific claim from the JWT token using a claims resolver function.
     *
     * @param token       the JWT token
     * @param claimsResolver a function that extracts the desired claim from the Claims object
     * @param <T>          the type of the claim to be extracted
     * @return the extracted claim value
     */
    private <T> T extractClaims(String token, Function<Claims, T> claimsResolver) {
        Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    /**
     * Extracts all claims from the JWT token.
     *
     * @param token the JWT token
     * @return the Claims object containing all claims from the token
     */
    private Claims extractAllClaims(String token) {
        return Jwts.parser()
                .setSigningKey(getSignKey())
                .build()
                .parseSignedClaimsJws(token)
                .getBody();
    }

    /**
     * Checks if the JWT token is valid.
     *
     * @param token the JWT token
     * @param details the UserDetails object of the user
     * @return true if the token is valid, false otherwise
     */
    public boolean isValid(String token, UserDetails details) {
        String username = extractUsername(token);
        return details.getUsername().equals(username) && !isTokenExpired(token);
    }

    /**
     * Checks if the JWT token is expired.
     *
     * @param token the JWT token
     * @return true if the token is expired, false otherwise
     */
    private boolean isTokenExpired(String token) {
        Date expiration = extractClaims(token, Claims::getExpiration);
        return expiration.before(new Date());
    }

    /**
     * Generates a JWT token for a given user.
     *
     * @param user the UserDetails object of the user
     * @return the generated JWT token
     */
    public String getToken(UserDetails user) {
        return createToken(user);
    }

    /**
     * Creates a JWT token with the user's username, expiration time, and authorities.
     *
     * @param user the UserDetails object of the user
     * @return the generated JWT token string
     */
    private String createToken(UserDetails user) {
        return Jwts.builder()
                .setSubject(user.getUsername())
                .setIssuedAt(new Date(System.currentTimeMillis()))
                // Consider setting a reasonable expiration time (e.g., 1 hour, 1 day)
                .setExpiration(new Date(System.currentTimeMillis() + 3600000)) // 1 hour in milliseconds
                .signWith(getSignKey())
                .claim("roles", user.getAuthorities())
                .compact();
    }

    /**
     * Gets the SecretKey used for signing and verifying JWT tokens.
     *
     * @return the SecretKey object
     */
    private SecretKey getSignKey() {
        byte[] keyBytes = Decoders.BASE64.decode(SECRET);
        return Keys.hmacShaKeyFor(keyBytes