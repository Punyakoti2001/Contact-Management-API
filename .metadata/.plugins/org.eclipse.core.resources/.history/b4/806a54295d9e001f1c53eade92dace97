package com.buildbot.contactsmanagement.serviceimpl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.buildbot.contactsmanagement.entity.Contact;
import com.buildbot.contactsmanagement.exceptionhandling.ResourceAlreadyExistException;
import com.buildbot.contactsmanagement.exceptionhandling.ResourceNotFoundException;
import com.buildbot.contactsmanagement.mapper.ContactMapper;
import com.buildbot.contactsmanagement.repository.ContactRepository;
import com.buildbot.contactsmanagement.requestDto.ContactDto;
import com.buildbot.contactsmanagement.responseDto.ContactResponseDto;
import com.buildbot.contactsmanagement.service.ContactService;

import jakarta.transaction.Transactional;

@Service
public class ContactServiceImpl implements ContactService 
{
	@Autowired
	private ContactRepository contactRepository;

	@Override
	@Transactional
	public ContactResponseDto createNewResource(ContactDto contactDto) {
		
		Optional<Contact> existEmail = contactRepository.findByEmail(contactDto.getEmail());
		Optional<Contact> existPhoneNo = contactRepository.findByPhoneNo(contactDto.getPhoneNo());
		
		if(existEmail.isPresent())
		{
			throw new ResourceAlreadyExistException("Email Already Exist");
		}
		
		if(existPhoneNo.isPresent())
		{
			throw new ResourceAlreadyExistException("PhoneNo Already Exist");
		}
		
		Contact contact = ContactMapper.INSTANCE.mapToContact(contactDto);
		Contact save = contactRepository.save(contact);
		
		ContactResponseDto responseDto = ContactMapper.INSTANCE.mapToContactResponseDto(save);
		System.out.println(responseDto);
		
		return responseDto;
	}

	@Override
	public ContactResponseDto updateExistingResource(Long contactId, ContactDto contactDto) {

        // Fetch the contact to update
        Contact contact = contactRepository.findById(contactId)
                .orElseThrow(() -> new ResourceNotFoundException("Contact", "contactId", contactId));

        // Check if the email is already used by a different contact
        Optional<Contact> existEmail = contactRepository.findByEmail(contactDto.getEmail());
        if (existEmail.isPresent() && !existEmail.get().getContactId().equals(contactId)) {
            throw new ResourceAlreadyExistException("Email already exists for another contact");
        }

        // Check if the phone number is already used by a different contact
        Optional<Contact> existPhoneNo = contactRepository.findByPhoneNo(contactDto.getPhoneNo());
        if (existPhoneNo.isPresent() && !existPhoneNo.get().getContactId().equals(contactId)) {
            throw new ResourceAlreadyExistException("Phone number already exists for another contact");
        }

        // Update the contact with the new data from DTO
        Contact updatedContact = ContactMapper.INSTANCE.updateMapToContact(contactDto, contact);

        // Save the updated contact
        updatedContact = contactRepository.save(updatedContact);}

	@Override
	public List<ContactResponseDto> fetchAllContacts() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ContactResponseDto fetchContactByPhoneNo(String phoneNo) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ContactResponseDto fetchContactByEmail(String email) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ContactResponseDto fetchContactByContactId(Long contactId) {
		// TODO Auto-generated method stub
		return null;
	}

}
