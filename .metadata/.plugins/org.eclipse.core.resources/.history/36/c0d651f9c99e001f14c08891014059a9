package com.buildbot.contactsmanagement.serviceimpl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import com.buildbot.contactsmanagement.entity.Contact;
import com.buildbot.contactsmanagement.exceptionhandling.ResourceAlreadyExistException;
import com.buildbot.contactsmanagement.exceptionhandling.ResourceNotFoundException;
import com.buildbot.contactsmanagement.mapper.ContactMapper;
import com.buildbot.contactsmanagement.repository.ContactRepository;
import com.buildbot.contactsmanagement.requestDto.ContactDto;
import com.buildbot.contactsmanagement.responseDto.ContactResponseDto;
import com.buildbot.contactsmanagement.service.ContactService;

import jakarta.transaction.Transactional;

/**
 * Implementation of the ContactService interface for managing contacts.
 * Handles CRUD operations, caching, and asynchronous processing.
 */
@Service
public class ContactServiceImpl implements ContactService {
    @Autowired
    private ContactRepository contactRepository;

    /**
     * Creates a new contact if the email and phone number do not already exist.
     *
     * @param contactDto Data transfer object containing contact details
     * @return ContactResponseDto containing details of the created contact
     * @throws ResourceAlreadyExistException if the email or phone number already exists
     */
    @Override
    @Transactional
    public ContactResponseDto createNewResource(ContactDto contactDto) {
        Optional<Contact> existEmail = contactRepository.findByEmail(contactDto.getEmail());
        Optional<Contact> existPhoneNo = contactRepository.findByPhoneNo(contactDto.getPhoneNo());

        if (existEmail.isPresent()) {
            throw new ResourceAlreadyExistException("Email Already Exist");
        }

        if (existPhoneNo.isPresent()) {
            throw new ResourceAlreadyExistException("PhoneNo Already Exist");
        }

        Contact contact = ContactMapper.INSTANCE.mapToContact(contactDto);
        Contact save = contactRepository.save(contact);
        return ContactMapper.INSTANCE.mapToContactResponseDto(save);
    }

    /**
     * Updates an existing contact by its ID if the email and phone number are unique to this contact.
     *
     * @param contactId ID of the contact to be updated
     * @param contactDto Data transfer object containing updated contact details
     * @return ContactResponseDto containing details of the updated contact
     * @throws ResourceNotFoundException if the contact with specified ID is not found
     * @throws ResourceAlreadyExistException if the email or phone number exists for another contact
     */
    @Override
    @Transactional
    @Async
    @CachePut(value = "contactCache", key = "#contactId")
    public ContactResponseDto updateExistingResource(Long contactId, ContactDto contactDto) {
        Contact contact = contactRepository.findById(contactId)
                .orElseThrow(() -> new ResourceNotFoundException("Contact", "ContactId", contactId));

        Optional<Contact> existEmail = contactRepository.findByEmail(contactDto.getEmail());
        if (existEmail.isPresent() && !existEmail.get().getContactId().equals(contactId)) {
            throw new ResourceAlreadyExistException("Email already exists for another contact");
        }

        Optional<Contact> existPhoneNo = contactRepository.findByPhoneNo(contactDto.getPhoneNo());
        if (existPhoneNo.isPresent() && !existPhoneNo.get().getContactId().equals(contactId)) {
            throw new ResourceAlreadyExistException("Phone number already exists for another contact");
        }

        Contact updatedContact = ContactMapper.INSTANCE.updateMapToContact(contactDto, contact);
        Contact update = contactRepository.save(updatedContact);
        return ContactMapper.INSTANCE.mapToContactResponseDto(update);
    }

    /**
     * Retrieves all contacts in the system.
     *
     * @return List of ContactResponseDto containing details of all contacts
     */
    @Override
    @Async
    @Cacheable(value = "contactCache", key = "'allContacts'")
    public List<ContactResponseDto> fetchAllContacts() {
        List<Contact> all = contactRepository.findAll();
        return ContactMapper.INSTANCE.listMapToContactResponseDto(all);
    }

    /**
     * Retrieves a contact by its phone number.
     *
     * @param phoneNo Phone number to filter by
     * @return ContactResponseDto containing details of the contact with the specified phone number
     * @throws ResourceNotFoundException if no contact with the specified phone number is found
     */
    @Override
    @Async
    @Cacheable(value = "contactCache", key = "#phoneNo")
    public ContactResponseDto fetchContactByPhoneNo(String phoneNo) {
        Contact contact = contactRepository.findByPhoneNo(phoneNo)
                .orElseThrow(() -> new ResourceNotFoundException("Contact", "PhoneNo", phoneNo));
        return ContactMapper.INSTANCE.mapToContactResponseDto(contact);
    }

    /**
     * Retrieves a contact by its email.
     *
     * @param email Email to filter by
     * @return ContactResponseDto containing details of the contact with the specified email
     * @throws ResourceNotFoundException if no contact with the specified email is found
     */
    @Override
    @Async
    @Cacheable(value = "contactCache", key = "#email")
    public ContactResponseDto fetchContactByEmail(String email) {
        Contact contact = contactRepository.findByEmail(email)
                .orElseThrow(() -> new ResourceNotFoundException("Contact", "Email", email));
        return ContactMapper.INSTANCE.mapToContactResponseDto(contact);
    }

    /**
     * Deletes a contact by its ID.
     *
     * @param contactId ID of the contact to delete
     * @throws ResourceNotFoundException if no contact with the specified ID is found
     */
    @Override
    @Async
    @Transactional
    @CacheEvict(value = "contactCache", key = "#contactId")
    public void deleteContact(Long contactId) {
        Contact contact = contactRepository.findById(contactId)
                .orElseThrow(() -> new ResourceNotFoundException("Contact", "ContactId", contactId));
        contactRepository.deleteById(contactId);
    }
}
